function example_generator(path, n, max_iters)
%EXAMPLE_GENERATOR Generate examples and write the, into files based on
%attributes
% The set of considered matrices are all stable.
%   Different Files:
%       1. Counter examples to submodular, non-decreasing, greedy of 1st
%       2. Counters to submodular, non-decreasing. Satisfies Greedy 1st
%       3. Counters to submodular, greedy 1. Satisifies non-decreasing
%       4. Counters to non-decreasing, greedy 1. Satisfies submodular
%       5. Counters to submodular. Satisfies greedy 1 and non-decreasing
%       6. Counters to non-decreasing. Satisfies greedy 1 and submodular
%       7. Counters to greedy 1. Satisfies submodular and non-decreasing
%       8. Satisfies submodular, greedy1, and non-decreasing
%   Parameters:
%       path (str) : Where to write file to. Does not include filename
%       n (int) : Size of matrices (generated A will be (n x n))
%       max_iters (int) : How many matrices to generate
    
    % generate the eight files
    var = 'Example Matrices';
    file_paths = cell(8, 1);
    for k = 1:8
        file_name = sprintf('file_4x4_%d.mat', k);
        file_paths{k} = fullfile(path, file_name);
        save(file_paths{k}, 'var');
    end

    % need to initialize something in each file, otherwise append will
    % break
   

    B = randi([-5 5], n, floor(n/2));  % B won't matter for any results
    A = randi([-10 10], n, n);

    for i = 1: max_iters 
        % first make sure that the matrix is stable
        while is_stable(A) == 0
            A = randi([-10 10], n, n);
        end

        % Conditional statements
        is_submodular = determine_submodularity(A);  % 0 if submodular
        is_nondecreasing = determine_nondecreasing(A);  % 0 if non-decreasing
        is_greedy = determine_node_removal(A, B);  % 0 if satisfies greedy

        eval(['A_' num2str(i) ' = A;'])  % dynamically create a var A_i

        new_A_str = sprintf('A_%d', i);  % string of new var to use to save
        % this is done because if variables are always named 'A', then
        % writing them to files will overwrite them.

        if is_submodular == 1 && is_nondecreasing == 1 && is_greedy == 1
            save(file_paths{1}, new_A_str, "-append");
        elseif is_submodular == 1 && is_nondecreasing == 1
            save(file_paths{2}, new_A_str, "-append");
        elseif is_submodular == 1 && is_greedy == 1
            save(file_paths{3}, new_A_str, "-append");
        elseif is_nondecreasing == 1 && is_greedy == 1
            save(file_paths{4}, new_A_str, "-append");
        elseif is_submodular == 1
            save(file_paths{5}, new_A_str, "-append");
        elseif is_nondecreasing == 1
            save(file_paths{6}, new_A_str, "-append");
        elseif is_greedy == 1
            save(file_paths{7}, new_A_str, "-append");
        else  % all equal to 0, all satisfied
            save(file_paths{8}, new_A_str, "-append");
        end

        A = randi([-10 10], n, n);

    end

end