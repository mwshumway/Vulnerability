function vulnerability_analysis(A, B)
%VULNERABILITY_ANALYSIS Condensed 
%   Detailed explanation goes here

    % % Swap the third and first rows
    % A([1, 3], :) = A([3, 1], :);
    % 
    % % Swap the third and first columns
    % A(:, [1, 3]) = A(:, [3, 1]);

    dsf = DSF(A, B);  % initialize DSF
    [n, ~] = size(A);
    [Q, ~] = dsf.dsf(n);
    H = dsf.vulnerability_matrix(Q);  
    
    [v_n, idx_n, V_n] = dsf.eval_vulnerability(H);
    vulnerabilities = [v_n];
    nodes = [idx_n];
    disp(V_n);
    
    for i = n-1:-1:0
        H_i = dsf.abstract(H, i, 0, 0);
        [v_i, idx_i, V_i] = dsf.eval_vulnerability(H_i);
        disp(V_i);
        vulnerabilities(n - i + 1) = v_i;
        nodes = [nodes; idx_i];
    end
    
    disp("Q = ");
    disp(Q);
    disp('(i, j) entry of max vulnerability:')
    disp(flip(nodes))

    ex = linspace(0, n, n+1);
    figure;
    plot(ex, flip(vulnerabilities), 'LineWidth', 3);
    title('Vulnerability vs. Exposed States');
    xlabel('Exposed States');
    ylabel('Vulnerability');

    figure;
    eigenvalues = eig(A);
    scatter(real(eigenvalues), imag(eigenvalues), 'Marker', "o", "MarkerFaceColor", 'red', "SizeData", 100);
    hold on;
    plot([0 0], ylim, 'k', 'LineWidth', 2);
    plot(xlim, [0, 0], 'k', 'LineWidth', 2);
    hold off;
    xlabel('Real Part');
    ylabel('Imaginary Part');
    title('Scatter Plot of Eigenvalues');

end