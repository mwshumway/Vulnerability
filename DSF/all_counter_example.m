function [A, B] = all_counter_example(n)
%ALL_COUNTER_EXAMPLE 
%   Find an nxn A such that it is optimal to remove node k, while the
%   entry with highest vulnerability in the more exposed system is (i,j)
%   where i,j != k. Also, stable. Also, not non-decreasing. Also, not
%   submodular.
%   Parameters:
%       n (int) : size of matrix to search over.
    B = randi([-5 5], n, floor(n/2));   % B does not affect any calculations
    A = randi([-5 5], n, n);  % random nxn matrix with entries in [-5, 5]. Adjust range as desired
    % the following code chooses n random indices to set to 0 in A.
    indices = randi([1, n^2], 1, n);
    [row_indices, col_indices] = ind2sub([n,n], indices);
    A(row_indices, col_indices) = 0;
    
    % iterate until a counter-example has been found.
    while is_stable(A) == 0 || determine_node_removal(A, B) == 0 || determine_nondecreasing(A) == 0 || determine_submodularity(A) == 0
        A = randi([-5  5], n, n);
        indices = randi([1, n^2], 1, n+1);
        [row_indices, col_indices] = ind2sub([n,n], indices);
        A(row_indices, col_indices) = 0;
    end

end