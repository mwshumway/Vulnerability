function satisfy_all3_analysis(iters)
%SATISFY_ALL3_ANALYSIS Search for patterns among matrices in file8
M = load('/Users/mwshumway/Desktop/IDeA/DSF/Matrices/file8.mat');
M_names = fieldnames(M);
disp("Matrices that satisfy all 3 properties:")
B = randi([-5 5], 3, 1);

for i=2:iters
    disp("A matrix:")
    mat_name = M_names{i};
    mat = M.(mat_name);
    disp(mat);
    % 
    disp('eigenvalues: ')
    eigvals = eig(mat);
    disp(eigvals);

    disp("Q: ")
    dsf = DSF(mat, B);
    [Q, ~] = dsf.dsf(3);
    disp(Q);

    % n = size(Q, 1);
    % for k = 1:n
    %     for j = 1:n
    %         if Q(k, j) ~= 0
    %             [num, den] = numden(Q(k,j));  % num/den of tf entry
    %             % coeffs(s^3 + 3s^2 + 10) -> [10, 0, 3, 1]
    %             num_coeffs = coeffs(num);
    %             den_coeffs = coeffs(den);
    %             % convert coeffs to matlab array and reverse order
    %             tf_kj = tf(flip(double(num_coeffs)), flip(double(den_coeffs)));
    %             poles = pole(tf_kj);
    %             if any(poles >= 0)
    %                 fprintf("unstable link at iteration %d \n", i);
    %             end
    %         end
    %     end
    % end


    
    % 
    H = dsf.vulnerability_matrix(Q);
    disp("H:")
    disp(H);
    m = size(H, 1);
    for k = 1:m
        for j = 1:m
            if H(k, j) ~= 0
                [num, den] = numden(H(k, j));
                num_coeffs = coeffs(num);
                den_coeffs = coeffs(den);
                t

    % 
    [v, ~, V] = dsf.eval_vulnerability(H);
    disp("vulnerability")
    disp(v);
    disp("V matrix")
    disp(V);

    disp("--------------------------------------------------------------");



end

end

